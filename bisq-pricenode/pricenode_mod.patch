diff --git a/pricenode/src/main/java/bisq/price/PriceProvider.java b/pricenode/src/main/java/bisq/price/PriceProvider.java
index 13b1dc7..a13666b 100644
--- a/pricenode/src/main/java/bisq/price/PriceProvider.java
+++ b/pricenode/src/main/java/bisq/price/PriceProvider.java
@@ -45,9 +45,6 @@ public abstract class PriceProvider<T> implements SmartLifecycle, Supplier<T> {
 
     @Override
     public final T get() {
-        if (!isRunning())
-            throw new IllegalStateException("call start() before calling get()");
-
         return cachedResult;
     }
 
@@ -55,7 +52,7 @@ public abstract class PriceProvider<T> implements SmartLifecycle, Supplier<T> {
     public final void start() {
         // we call refresh outside the context of a timer once at startup to ensure that
         // any exceptions thrown get propagated and cause the application to halt
-        refresh();
+        //refresh();
 
         timer.scheduleAtFixedRate(new TimerTask() {
             @Override
diff --git a/pricenode/src/main/java/bisq/price/spot/ExchangeRateService.java b/pricenode/src/main/java/bisq/price/spot/ExchangeRateService.java
index 6fcf4a6..e1300b6 100644
--- a/pricenode/src/main/java/bisq/price/spot/ExchangeRateService.java
+++ b/pricenode/src/main/java/bisq/price/spot/ExchangeRateService.java
@@ -61,6 +61,8 @@ class ExchangeRateService {
         Map<String, ExchangeRate> aggregateExchangeRates = getAggregateExchangeRates();
 
         providers.forEach(p -> {
+            if (p.get() == null)
+                return;
             Set<ExchangeRate> exchangeRates = p.get();
 
             // Specific metadata fields for specific providers are expected by the client,
@@ -136,6 +138,8 @@ class ExchangeRateService {
     private Map<String, List<ExchangeRate>> getCurrencyCodeToExchangeRates() {
         Map<String, List<ExchangeRate>> currencyCodeToExchangeRates = new HashMap<>();
         for (ExchangeRateProvider p : providers) {
+            if (p.get() == null)
+                continue;
             for (ExchangeRate exchangeRate : p.get()) {
                 String currencyCode = exchangeRate.getCurrency();
                 if (currencyCodeToExchangeRates.containsKey(currencyCode)) {
