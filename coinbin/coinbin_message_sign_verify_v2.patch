From 6feecd9d915164e08b206f08db1d880a16e36a1d Mon Sep 17 00:00:00 2001
From: Wowee0 <co81407@coxj.com>
Date: Wed, 25 Dec 2019 19:25:37 -0600
Subject: [PATCH] message sign & verify v2

---
 index.html    |  62 +++++++++++++-
 js/coin.js    | 230 +++++++++++++++++++++++++++++++++++++++++++++++++-
 js/coinbin.js | 162 +++++++++++++++++++++++++++--------
 3 files changed, 416 insertions(+), 38 deletions(-)

diff --git a/index.html b/index.html
index 37cdc134..2239680e 100644
--- a/index.html
+++ b/index.html
@@ -979,10 +979,30 @@ <h2>Verify <small>transactions and other scripts</small></h2>
 							<div class="col-md-12">
 								<p>Enter the raw transaction, redeem script, pubkey, hd address or wif key to convert it into a readable format that can be verified manually.</p>
 								<textarea type="text" id="verifyScript" class="form-control" style="height:125px"></textarea>
+								<br />
+
+								<a href="javascript:;" id="verifyAdvancedCollapse">
+									<div class="well well-sm"><span class="glyphicon glyphicon-collapse-down"></span> Advanced Options</div>
+								</a>
+
+								<div id="verifyAdvanced" class="hidden">
+									<div class="row">
+										<div class="col-md-12">
+										<label><input type="checkbox" id="chkVerifyMessage" class="checkbox-inline">Verify a signed message</label>
+										</div>
+									</div>
+								</div>
 							</div>
 						</div>
 						<br>
 
+						<div class="hidden verifyData" id="verifyMessageData">
+							<p>Enter the information necessary to verify the signed message:</p>
+							<p><b>Address</b>: <input type="text" class="form-control address"></p>
+							<p><b>Signature</b>: <input type="text" class="form-control signature"></p>
+							<br />
+						</div>
+
 						<div class="hidden verifyData" id="verifyRsData">
 
 							<h4>Redeem Script</h4>
@@ -1293,6 +1313,39 @@ <h2>Sign Transaction <small>once a transaction has been verified</small></h2>
 							<div class="alert alert-info" id="sighashTypeInfo">
 								SIGHASH_ALL: The default, signs all the inputs and outputs, protecting everything except the signature scripts against modification.
 							</div>
+
+							<div class="row">
+								<div class="col-md-12">
+								<label><input type="checkbox" id="chkSignMessage" class="checkbox-inline">Sign a text message</label>
+
+								<div class="hidden signData" id="signMessageData">
+									<div class="col-xs-3">
+										Address type
+										<select id="sigAddressType" class="form-control">
+											<option selected>p2pkh</option>
+											<option>p2sh(p2wpkh)</option>
+											<option>p2wpkh</option>
+										</select>
+									</div>
+									<div class="col-xs-10">
+									<label>Address</label><span class="text-muted"> (for verifying)</span>
+									<div class="input-group-btn">
+										<input id="newSignPub" type="text" class="form-control" value="" readonly>
+									</div>
+									<label>Signature</label>
+									<div class="input-group-btn">
+										<input id="newSignSig" type="text" class="form-control" value="" readonly>
+									</div>
+									</div>
+									<br />
+									<br />
+									<br />
+									<br />
+									</div>
+								</div>
+							</div>
+
+
 						</div>
 
 						<div class="alert alert-danger hidden" id="signedDataError">
@@ -1395,15 +1448,20 @@ <h2>Settings <small> making coinb.in even better!</small></h2>
 
 
 							<div class="row">
-								<div class="col-md-6">
+								<div class="col-md-4">
 									<b>HD Pub</b>: <br>
 									<input type="text" class="form-control coinjssetting" id="coinjs_hdpub">
 								</div>
 
-								<div class="col-md-6">
+								<div class="col-md-4">
 									<b>HD Priv</b>: <br>
 									<input type="text" class="form-control coinjssetting" id="coinjs_hdprv">
 								</div>
+
+								<div class="col-md-4">
+									<b>Network</b>: <br>
+									<input type="text" class="form-control" id="coinjs_network">
+								</div>
 							</div>
 
 							<br>
diff --git a/js/coin.js b/js/coin.js
index 2c03e146..f4e74215 100644
--- a/js/coin.js
+++ b/js/coin.js
@@ -10,6 +10,7 @@
 	var coinjs = window.coinjs = function () { };
 
 	/* public vars */
+	coinjs.network = "bitcoin_mainnet";
 	coinjs.pub = 0x00;
 	coinjs.priv = 0x80;
 	coinjs.multisig = 0x05;
@@ -1421,7 +1422,7 @@
 			// some necessary things out of the way for clarity.
 			badrs = badrs || 0;
 			var key = coinjs.wif2privkey(wif);
-			var x = Crypto.util.hexToBytes(key['privkey'])
+			var x = Crypto.util.hexToBytes(key['privkey']);
 			var curve = EllipticCurve.getSECCurveByName("secp256k1");
 			var N = curve.getN();
 
@@ -1779,6 +1780,159 @@
 
 	/* start of signature vertification functions */
 
+	// method for signing a message
+	coinjs.MsgSig = function(wif, message, bip0137) {
+		var hash = Crypto.SHA256(Crypto.SHA256(message,{asBytes: true}),{asBytes: true});
+		var curve = EllipticCurve.getSECCurveByName("secp256k1");
+		var key = coinjs.wif2privkey(wif);
+		var priv = BigInteger.fromByteArrayUnsigned(Crypto.util.hexToBytes(key['privkey']));
+		var n = curve.getN();
+		var e = BigInteger.fromByteArrayUnsigned(hash);
+		var badrs = 0;
+		var recId = 1;
+		do {
+			var k = coinjs.transaction().deterministicK(wif, hash, badrs);
+			var G = curve.getG();
+			var Q = G.multiply(k);
+			var r = Q.getX().toBigInteger().mod(n);
+			var s = k.modInverse(n).multiply(e.add(priv.multiply(r))).mod(n);
+			if (Q.getY().toBigInteger().mod(n).isEven()) {
+				recId = 0;
+			}
+			badrs++
+		} while (r.compareTo(BigInteger.ZERO) <= 0 || s.compareTo(BigInteger.ZERO) <= 0);
+
+		// Force lower s values per BIP62
+		var halfn = n.shiftRight(1);
+		if (s.compareTo(halfn) > 0) {
+			s = n.subtract(s);
+			recId ^= 1;
+		};
+
+		var rBa = r.toByteArraySigned();
+		var sBa = s.toByteArraySigned();
+		var rec = 0;
+		if (rBa.length > 32 && rBa[0] == 0) {
+			rBa.splice(0,1);	// remove first 0 element
+		}
+		var derivedAddress = "";
+
+		// bip0137: recId encodes address type and key derivation info
+		if (bip0137 == "p2pkh") {
+			if (key['compressed'] == false)	{
+				recId = recId + 27;
+			}
+			else {
+				recId = recId + 31;
+			}
+			derivedAddress = coinjs.wif2address(wif);
+		}
+		else if (bip0137 == "p2sh(p2wpkh)") {
+			recId = recId + 35;
+			derivedAddress = coinjs.segwitAddress(coinjs.wif2pubkey(wif).pubkey);
+		}
+		else if (bip0137 == "p2wpkh") {
+			recId = recId + 39;
+			derivedAddress = coinjs.bech32Address(coinjs.wif2pubkey(wif).pubkey);
+		}
+		var signature = [];
+		signature.push(recId);
+		signature = signature.concat(rBa).concat(sBa);
+		return {'address':derivedAddress, 'signature':signature};
+	}
+
+	/*
+	https://tools.ietf.org/html/rfc6979
+	https://stackoverflow.com/questions/19665491/how-do-i-get-an-ecdsa-public-key-from-just-a-bitcoin-signature-sec1-4-1-6-k
+	https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work/18106#18106
+	https://github.com/nanotube/supybot-bitcoin-marketmonitor/blob/master/GPG/local/bitcoinsig.py
+
+	 with the signature and the message that was signed, and the knowledge of the curve,
+	 it is possible to generate two public keys; one of which will be the public key
+	 corresponding to the private key used.
+
+	Here's how that works:
+
+	  First, you find the two points 𝑅, 𝑅′ which have the value 𝑟 as the x-coordinate 𝑟
+
+	  You also compute 𝑟−1, which is the multiplicative inverse of the value 𝑟
+	  from the signature (modulo the order of the generator of the curve).
+
+	  Then, you compute 𝑧
+	  which is the lowest 𝑛 bits of the hash of the message (where 𝑛 is the bit size of the curve).
+
+	  Then, the two public keys are 𝑟^−1(𝑠𝑅−𝑧𝐺) and 𝑟^−1(𝑠𝑅′−𝑧𝐺)
+
+	  It is easy to verify that if you plug either of these values in the ECDSA signature routines as the public keys, the signature validates.
+
+	Addendum:
+	  𝑄1=𝑟^−1(𝑠𝑅−𝑧𝐺) and 𝑄2=𝑟^−1(𝑠𝑅′−𝑧𝐺)
+	 (𝑠^−1 𝑧𝐺 + 𝑠^−1 𝑟𝑄𝑖)𝑥 = 𝑟 mod 𝑛
+	*/
+
+	coinjs.MsgSigVerify = function (message, sig, address) {
+		var hash = Crypto.SHA256(Crypto.SHA256(message,{asBytes: true}),{asBytes: true});
+		var cursor = 1;
+		var fCompressed = true;
+		var recId = sig.slice(cursor-1, cursor);
+		var rBa = sig.slice(cursor, cursor + 32);
+		cursor += rBa.length;
+		var sBa = sig.slice(cursor, cursor + 32);
+
+		// github.com/bitcoin/bips/blob/master/bip-0137.mediawiki <--- recId
+		var bip0137 = "p2pkh";
+		if (recId >= 35 && recId <= 38) {
+			recId = recId - 35;
+			bip0137 = "p2sh(p2wpkh)";
+		}
+		else if (recId >= 39 && recId <= 42) {
+			recId = recId - 39;
+			bip0137 = "p2wpkh";
+		}
+		else if (recId >= 31 && recId <= 34) {
+			recId = recId - 31;
+		}
+		else if (recId >= 27 && recId <= 30) {
+			recId = recId - 27;
+			fCompressed = false;  // this is the only case uncompressed keys are used
+		}
+
+		var r = BigInteger.fromByteArrayUnsigned(rBa);
+		var s = BigInteger.fromByteArrayUnsigned(sBa);
+		var ecparams = EllipticCurve.getSECCurveByName("secp256k1");
+		var curve = ecparams.getCurve();
+		var n = ecparams.getN();
+		var G = ecparams.getG();
+		// 1.1 x = r + jn
+		var x = r;
+		// 1.3 convert x to a point on the curve
+		var R1 = curve.decompressPoint(recId, x);
+		var R2 = R1.negate();
+		// 1.5 compute e from M (hash done already)
+		var e = BigInteger.fromByteArrayUnsigned(hash);
+		// 1.6.1 candidate pubkey Q = r^-1 (sR - eG)
+		//var Q = r.pow(-1).multiply((s.multiply(R).subtract(e.multiply(G))));
+		var v1 = r.modInverse(n)
+		var v2 = G.multiply(e);
+		var v3 = R1.multiply(s);
+		var v4 = v3.add(v2.negate());
+		var Q = v4.multiply(v1);
+		var pubkey = Crypto.util.bytesToHex(Q.getEncoded(compressed=fCompressed));
+		if (bip0137 == "p2pkh") {
+			derivedAddress = coinjs.pubkey2address(pubkey);
+		}
+		if (bip0137 == "p2sh(p2wpkh)") {
+			derivedAddress = coinjs.segwitAddress(pubkey).address;
+		}
+		if (bip0137 == "p2wpkh") {
+			derivedAddress = coinjs.bech32Address(pubkey).address;
+		}
+		return (address==derivedAddress);
+	}
+
+
+
+
 	coinjs.verifySignature = function (hash, sig, pubkey) {
 
 		function parseSig (sig) {
@@ -1903,6 +2057,80 @@
 		return bytes;		
 	}
 
+	/**
+	*
+	*  Base64 encode / decode
+	*  http://www.webtoolkit.info/
+	*
+	**/
+
+
+	// private property
+
+	// public method for encoding
+	coinjs.base64encode = function (input) {
+		var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
+		var output = "";
+		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
+		var i = 0;
+
+		//input = Base64._utf8_encode(input);
+
+		while (i < input.length) {
+
+		    chr1 = input[i++]; //.charCodeAt(i++);
+		    chr2 = input[i++]; //.charCodeAt(i++);
+		    chr3 = input[i++]; //.charCodeAt(i++);
+
+		    enc1 = chr1 >> 2;
+		    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
+		    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
+		    enc4 = chr3 & 63;
+
+		    if (isNaN(chr2)) {
+		        enc3 = enc4 = 64;
+		    } else if (isNaN(chr3)) {
+		        enc4 = 64;
+		    }
+
+		    output = output +
+		    _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
+		    _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
+		}
+		return output;
+	},
+
+	// public method for decoding
+	coinjs.base64decode = function (input) {
+		var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
+		var output = [];
+		var chr1, chr2, chr3;
+		var enc1, enc2, enc3, enc4;
+		var i = 0;
+
+		 while (i < input.length) {
+
+		    enc1 = _keyStr.indexOf(input.charAt(i++));
+		    enc2 = _keyStr.indexOf(input.charAt(i++));
+		    enc3 = _keyStr.indexOf(input.charAt(i++));
+		    enc4 = _keyStr.indexOf(input.charAt(i++));
+
+		    chr1 = (enc1 << 2) | (enc2 >> 4);
+		    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
+		    chr3 = ((enc3 & 3) << 6) | enc4;
+
+		    output.push(chr1);
+
+		    if (enc3 != 64) {
+		        output.push(chr2);
+		    }
+		    if (enc4 != 64) {
+		        output.push(chr3);
+		    }
+		}
+		return output;
+	}
+
 	/* raw ajax function to avoid needing bigger frame works like jquery, mootools etc */
 	coinjs.ajax = function(u, f, m, a){
 		var x = false;
diff --git a/js/coinbin.js b/js/coinbin.js
index ede27692..165673fd 100644
--- a/js/coinbin.js
+++ b/js/coinbin.js
@@ -1411,25 +1411,99 @@ $(document).ready(function() {
 	}
 
 
+	$("#chkVerifyMessage").click(function(){
+		if($(this).is(":checked")){
+			$("#verifyMessageData").removeClass("hidden");
+		} else {
+			$("#verifyMessageData").addClass("hidden");
+		}	
+	});
 
+	$("#chkSignMessage").click(function(){
+		if($(this).is(":checked")){
+			$("#signMessageData").removeClass("hidden");
+		} else {
+			$("#signMessageData").addClass("hidden");
+		}	
+	});
 
-	/* verify script code */
 
+	/* sign message code */
+	function signMessage() {
+		var rawmessage = $("#signTransaction").val();
+		var wif = $("#signPrivateKey").val();
+		if (wif.length == 0) {
+			alert("Enter the WIF key to sign.");
+		} else {
+			try {
+				var bip0137 = $("#sigAddressType option:selected").html();
+				var messageToSign = formatSigningMessage(rawmessage);
+				var sigArr = coinjs.MsgSig(wif, messageToSign, bip0137);
+				var sigB64 = coinjs.base64encode(sigArr.signature);
+				$("#newSignSig").val(sigB64);
+				$("#newSignPub").val(sigArr.address.address);
+			} catch(e) {
+				console.log(e);
+			}
+		}
+	}
+
+	/* verify message code */
+	function verifySignedMessage() {
+		var rawmessage = $("#verifyScript").val();
+		var messageToSign = formatSigningMessage(rawmessage);
+		var sigB64 = $("#verifyMessageData .signature").val();
+		var w2address = $("#verifyMessageData .address").val();
+		var sigB64b = coinjs.base64decode(sigB64);
+		var sigB64t = Crypto.util.bytesToHex(sigB64b);
+		if (coinjs.MsgSigVerify(messageToSign, sigB64b, w2address)) {
+			alert("message verified!"); }
+		else {
+			alert("message NOT verified!"); }
+	}
+
+	// signed messages predefined format, eg: "[varint]Bitcoin Signed Message:\n[varint][message]"
+	function formatSigningMessage(postfix) {
+		var messageToSign = [];
+		var prefix = "Signed Message:\n";
+		if (coinjs.network.indexOf("bitcoin")>=0)    { prefix = "Bitcoin " + prefix; }
+		if (coinjs.network.indexOf("litecoin")>=0)   { prefix = "Litecoin " + prefix; }
+		if (coinjs.network.indexOf("dogecoin")>=0)   { prefix = "Dogecoin " + prefix; }
+		if (coinjs.network.indexOf("carboncoin")>=0) { prefix = "Carboncoin " + prefix; }
+		if (coinjs.network.indexOf("shadowcash")>=0) { prefix = "Shadowcash " + prefix; }
+		messageToSign = messageToSign.concat(coinjs.numToVarInt(prefix.length));
+		messageToSign = messageToSign.concat(prefix.split(''));
+		messageToSign = messageToSign.concat(coinjs.numToVarInt(postfix.length));
+		messageToSign = messageToSign.concat(postfix.split(''));
+		for (i=0; i < messageToSign.length; i++) {
+			if (typeof messageToSign[i] === 'string') {
+				messageToSign[i] = messageToSign[i].charCodeAt(0);
+			}
+		}
+		return messageToSign;
+	}
+
+
+	/* verify script code */
 	$("#verifyBtn").click(function(){
-		$(".verifyData").addClass("hidden");
 		$("#verifyStatus").hide();
-		if(!decodeRedeemScript()){
-			if(!decodeTransactionScript()){
-				if(!decodePrivKey()){
-					if(!decodePubKey()){
-						if(!decodeHDaddress()){
-							$("#verifyStatus").removeClass('hidden').fadeOut().fadeIn();
+		if($("#chkVerifyMessage").is(":checked")){
+			verifySignedMessage();
+		}
+		else {
+			$(".verifyData").addClass("hidden");
+			if(!decodeRedeemScript()){
+				if(!decodeTransactionScript()){
+					if(!decodePrivKey()){
+						if(!decodePubKey()){
+							if(!decodeHDaddress()){
+								$("#verifyStatus").removeClass('hidden').fadeOut().fadeIn();
+							}
 						}
 					}
 				}
 			}
 		}
-
 	});
 
 	function decodeRedeemScript(){
@@ -1689,37 +1763,42 @@ $(document).ready(function() {
 	/* sign code */
 
 	$("#signBtn").click(function(){
-		var wifkey = $("#signPrivateKey");
-		var script = $("#signTransaction");
-
-		if(coinjs.addressDecode(wifkey.val())){
-			$(wifkey).parent().removeClass('has-error');
-		} else {
-			$(wifkey).parent().addClass('has-error');
+		if($("#chkSignMessage").is(":checked")){
+			var signed = signMessage();
 		}
+		else {
+			var wifkey = $("#signPrivateKey");
+			var script = $("#signTransaction");
 
-		if((script.val()).match(/^[a-f0-9]+$/ig)){
-			$(script).parent().removeClass('has-error');
-		} else {
-			$(script).parent().addClass('has-error');
-		}
+			if(coinjs.addressDecode(wifkey.val())){
+				$(wifkey).parent().removeClass('has-error');
+			} else {
+				$(wifkey).parent().addClass('has-error');
+			}
 
-		if($("#sign .has-error").length==0){
-			$("#signedDataError").addClass('hidden');
-			try {
-				var tx = coinjs.transaction();
-				var t = tx.deserialize(script.val());
+			if((script.val()).match(/^[a-f0-9]+$/ig)){
+				$(script).parent().removeClass('has-error');
+			} else {
+				$(script).parent().addClass('has-error');
+			}
 
-				var signed = t.sign(wifkey.val(), $("#sighashType option:selected").val());
-				$("#signedData textarea").val(signed);
-				$("#signedData .txSize").html(t.size());
-				$("#signedData").removeClass('hidden').fadeIn();
-			} catch(e) {
-				// console.log(e);
+			if($("#sign .has-error").length==0){
+				$("#signedDataError").addClass('hidden');
+				try {
+					var tx = coinjs.transaction();
+					var t = tx.deserialize(script.val());
+
+					var signed = t.sign(wifkey.val(), $("#sighashType option:selected").val());
+					$("#signedData textarea").val(signed);
+					$("#signedData .txSize").html(t.size());
+					$("#signedData").removeClass('hidden').fadeIn();
+				} catch(e) {
+					// console.log(e);
+				}
+			} else {
+				$("#signedDataError").removeClass('hidden');
+				$("#signedData").addClass('hidden');
 			}
-		} else {
-			$("#signedDataError").removeClass('hidden');
-			$("#signedData").addClass('hidden');
 		}
 	});
 
@@ -1737,6 +1816,16 @@ $(document).ready(function() {
 		}
 	});
 
+	$("#verifyAdvancedCollapse").click(function(){
+		if($("#verifyAdvanced").hasClass('hidden')){
+			$("span",this).removeClass('glyphicon-collapse-down').addClass('glyphicon-collapse-up');
+			$("#verifyAdvanced").removeClass("hidden");
+		} else {
+			$("span",this).removeClass('glyphicon-collapse-up').addClass('glyphicon-collapse-down');
+			$("#verifyAdvanced").addClass("hidden");
+		}
+	});
+
 	/* page load code */
 
 	function _get(value) {
@@ -1861,6 +1950,7 @@ $(document).ready(function() {
 
 		if($("#settings .has-error").length==0){
 
+			coinjs.network =  $("#coinjs_network").val();
 			coinjs.pub =  $("#coinjs_pub").val()*1;
 			coinjs.priv =  $("#coinjs_priv").val()*1;
 			coinjs.multisig =  $("#coinjs_multisig").val()*1;
@@ -1887,6 +1977,7 @@ $(document).ready(function() {
 
 	$("#coinjs_coin").change(function(){
 
+		var network = ($("option:selected",this).attr("value")).split(";");
 		var o = ($("option:selected",this).attr("rel")).split(";");
 
 		// deal with broadcasting settings
@@ -1908,6 +1999,7 @@ $(document).ready(function() {
 		}
 
 		// deal with the reset
+		$("#coinjs_network").val(network);
 		$("#coinjs_pub").val(o[0]);
 		$("#coinjs_priv").val(o[1]);
 		$("#coinjs_multisig").val(o[2]);

